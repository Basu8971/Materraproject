var cor = [
  [72.28572635398984, 23.152475004733255],
  [72.98335818992734, 23.152475004733255],
  [72.98335818992734, 23.633949214558577],
  [72.28572635398984, 23.633949214558577],
  [72.28572635398984, 23.152475004733255]
]

var geometry = ee.Geometry.Polygon(cor)

Map.centerObject(geometry);

// Define the time range for 2023 to 2024
var time_start = ee.Date('2023-01-01')
var time_end = ee.Date('2024-12-31')
var time_dif = time_end.difference(time_start, 'day')

// Load Sentinel-1 data (VV polarization and IW mode)
var sen1 = ee.ImageCollection("COPERNICUS/S1_GRD")
  .filterDate(time_start, time_end)
  .filterBounds(geometry)
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .select('VV')

print(sen1.aggregate_array('orbitProperties_pass').distinct())

// Filter ascending and descending orbits
var asc = sen1.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
var des = sen1.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))

// Generate a list of dates at 10-day intervals
var list_dates = ee.List.sequence(0, time_dif, 10).map(function(interval){
  return ee.Date.fromYMD(2023, 1, 1).advance(interval, 'days')
})

// Create 10-day composites for ascending and descending orbits
var asc_10days = ee.ImageCollection(list_dates.map(function(dates){
  var start_date = ee.Date(dates)
  var end_date = start_date.advance(10, 'days')
  var composite = asc.filterDate(start_date, end_date).mean()
  var bands = composite.bandNames().size()
  return composite
    .set('system:time_start', start_date.millis())
    .set('system:time_end', end_date.millis())
    .set('band_number', bands)
})).filter(ee.Filter.eq('band_number', 1))

var des_10days = ee.ImageCollection(list_dates.map(function(dates){
  var start_date = ee.Date(dates)
  var end_date = start_date.advance(10, 'days')
  var composite = des.filterDate(start_date, end_date).mean()
  var bands = composite.bandNames().size()
  return composite
    .set('system:time_start', start_date.millis())
    .set('system:time_end', end_date.millis())
    .set('band_number', bands)
})).filter(ee.Filter.eq('band_number', 1))

// Perform speckle reduction using a focal mean
var asc_sigma = asc_10days.map(function(img){
  var sigma = ee.Image(10).pow(img.divide(10)).rename('sigma')
  var speckle = sigma.focalMean(30, 'square', 'meters');
  return speckle.copyProperties(img, img.propertyNames())
})

var des_sigma = des_10days.map(function(img){
  var sigma = ee.Image(10).pow(img.divide(10)).rename('sigma')
  var speckle = sigma.focalMean(30, 'square', 'meters');
  return speckle.copyProperties(img, img.propertyNames())
})

// Create water and urban masks from Dynamic World dataset
var water_mask = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
  .select('label').filterDate(time_start, time_end)
  .filterBounds(geometry).mode().eq(0).not()

var urban_mask = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
  .select('label').filterDate(time_start, time_end)
  .filterBounds(geometry).mode().eq(6).not()

// Calculate soil moisture index for ascending and descending orbits
var asc_min = asc_sigma.min()
var asc_max = asc_sigma.max()

var asc_sm = asc_sigma.map(function(img){
  var index = (img.subtract(asc_min)).divide(asc_max.subtract(asc_min))
  var date = img.date().format('YYYY-MM-dd')
  return index.multiply(water_mask).multiply(urban_mask).rename('sm_asc')
    .copyProperties(img, ['system:time_start'])
    .set('date', ee.String(date))
})

Map.addLayer(asc_sm.filterDate('2023-01-01', '2024-12-31').toBands().clip(geometry), [], 'sm_asc', false)

var des_min = des_sigma.min()
var des_max = des_sigma.max()

var des_sm = des_sigma.map(function(img){
  var index = (img.subtract(des_min)).divide(des_max.subtract(des_min))
  var date = img.date().format('YYYY-MM-dd')
  return index.multiply(water_mask).multiply(urban_mask).rename('sm_des')
    .copyProperties(img, ['system:time_start'])
    .set('date', ee.String(date))
})

Map.addLayer(des_sm.filterDate('2023-01-01', '2024-12-31').toBands().clip(geometry), [], 'sm_des', false)

// Plot the soil moisture time series for the area of interest (geometry2)
var cor2 = [
  [72.57191310377748, 23.366357619898828],
  [72.57239053698213, 23.366357619898828],
  [72.57239053698213, 23.36685006594045],
  [72.57191310377748, 23.36685006594045],
  [72.57191310377748, 23.366357619898828]
]

var geometry2 = ee.Geometry.Polygon(cor2)

print(
  ui.Chart.image.series(asc_sm, geometry2, ee.Reducer.mean(), 30, 'system:time_start')
)

print(
  ui.Chart.image.series(des_sm, geometry2, ee.Reducer.mean(), 30, 'system:time_start')
)

// Export the soil moisture data to Google Drive
Export.image.toDrive({
  image: des_sm.filterDate('2023-01-01', '2024-12-31').toBands().clip(geometry),
  description: 'des_sm', 
  scale: 30, 
  region: geometry, 
  crs: 'EPSG:4326', 
  folder: 'test', 
  maxPixels: 1e13
})
