// Load the CSV data as a FeatureCollection (polygons from your CSV)
var farmersCSV = ee.FeatureCollection('projects/ee-basavarajnargal/assets/Farmerslist1');

// Function to create polygons from the coordinates in the CSV
var createPolygonFromCoordinates = function(feature) {
  var coordinatesString = feature.get('Coordinates');  // Get the coordinates string
  var coordinatesList = ee.List(ee.String(coordinatesString).split(' '));  // Split into individual coordinate strings
  
  // Create a list of latitude/longitude pairs by parsing each string and converting them to numbers
  var coordinates = coordinatesList.map(function(coord) {
    var latLng = ee.List(ee.String(coord).split(',').slice(0, 2)).map(ee.Number.parse);  // Extract lat, lon and parse them
    return latLng;  // Return the [lat, lon] pair
  });
  
  // Create a polygon using the parsed coordinates
  var polygon = ee.Geometry.Polygon(coordinates);  // Create the polygon geometry
  return feature.setGeometry(polygon);  // Set the geometry of the feature
};

// Apply the function to all features in the CSV to create polygons
var farmersPolygons = farmersCSV.map(createPolygonFromCoordinates);

// Visualize the polygons on the map (in red color)
Map.addLayer(farmersPolygons, {color: 'red'}, 'Farmers Polygons');
Map.centerObject(farmersPolygons, 8);  // Adjust zoom level to fit the polygons on the map

// Use the first polygon (or select any other) for analysis
var geometry = farmersPolygons.first().geometry();  // Select the first polygon from the collection

// Sentinel-1 ImageCollection for the polygon with the updated date range (1 January 2024 to 1 December 2024)
var sen1 = ee.ImageCollection("COPERNICUS/S1_GRD")
  .filterDate('2024-01-01', '2024-12-01')  // Filter from 1 Jan 2024 to 1 Dec 2024
  .filterBounds(geometry)
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .select('VV', 'VH');

// Print the Sentinel-1 image collection for the selected polygon
print(sen1);

// Calculate Radar Vegetation Index (RVI) for the selected polygon
var rvi = sen1.map(function(img) {
  var sigma = ee.Image(10).pow(img.divide(10));
  var index = sigma.expression('(4 * vh)/(vh + vv)', {
    'vv': sigma.select('VV'), 'vh': sigma.select('VH')
  }).rename('RVI');
  var smooth = index.focalMedian(30, 'square', 'meters');
  return smooth.copyProperties(img, ['system:time_start', 'system:time_end']);
});

// Visualize the RVI for the selected polygon
Map.addLayer(rvi.mean().clip(geometry), [], 'RVI for Selected Polygon', false);

// Plot RVI for the selected polygon using a time series chart
print(
  ui.Chart.image.series(rvi, geometry, ee.Reducer.mean(), 10, 'system:time_start')
);

// Plot Sentinel-1 for the selected polygon using a time series chart
print(
  ui.Chart.image.series(sen1, geometry, ee.Reducer.mean(), 10, 'system:time_start')
);

// Add RVI for 2024 to the map (1 Jan 2024 to 1 Dec 2024) for the selected polygon
Map.addLayer(rvi.filterDate('2024-01-01', '2024-12-01').toBands().clip(geometry), [], 'RVI for 2024', false);
