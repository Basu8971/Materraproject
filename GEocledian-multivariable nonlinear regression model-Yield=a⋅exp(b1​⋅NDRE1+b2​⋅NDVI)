import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from sklearn.metrics import r2_score


# Load the CSV file into a pandas DataFrame
file_path = r"C:\Users\basavaraj.nargal_mat\Downloads\Farmers list-2 - Sheet22.csv"
df = pd.read_csv(file_path)


# Check the first few rows of the data to ensure it's loaded correctly
print(df.head())




# Define a combined exponential model (multivariate model)
def combined_exponential(x, a, b1, b2):
   return a * np.exp(b1 * x[0] + b2 * x[1])




# Function to fit the combined model
def fit_combined_model():
   # Prepare the input data (Mean NDRE1, Mean NDVI) and output data (Yield)
   X = df[['Mean NDRE1', 'Mean NDVI']].values  # NDRE1 and NDVI as input features
   y = df['Yield'].values  # Yield as the output


   # Fit the combined model to the data
   params, covariance = curve_fit(combined_exponential, X.T, y, p0=[500, 0.1, 0.1])


   # Get the fitted parameters
   a_fit, b1_fit, b2_fit = params
   print(f"Fitted parameters: a = {a_fit}, b1 = {b1_fit}, b2 = {b2_fit}")


   # Generate fitted values using the model
   df['Yield_Fitted'] = combined_exponential(X.T, *params)


   # Plot the original data and the fitted curve (3D plot)
   fig = plt.figure()
   ax = fig.add_subplot(111, projection='3d')
   ax.scatter(df['Mean NDRE1'], df['Mean NDVI'], df['Yield'], color='blue', label='Data')


   # Plotting the fitted model is difficult in 3D, so we'll show it in 2D projections
   ax.set_xlabel('Mean NDRE1')
   ax.set_ylabel('Mean NDVI')
   ax.set_zlabel('Yield')
   ax.set_title('Combined Model (NDRE1, NDVI) vs Yield - Fitted Surface')
   plt.show()


   # Calculate and print R-squared value
   r2 = r2_score(y, df['Yield_Fitted'])
   print(f"R-squared: {r2:.4f}")


   return params




# Fit the combined model
combined_params = fit_combined_model()




# Function to predict yield based on Mean NDRE1 and Mean NDVI values
def predict_yield_combined(ndre1_value, ndvi_value, model_params):
   # Ensure the input values are within a valid range (0 to 1)
   if ndre1_value < 0 or ndre1_value > 1 or ndvi_value < 0 or ndvi_value > 1:
       raise ValueError("NDRE1 and NDVI values must be between 0 and 1.")


   # Extract the model parameters
   a, b1, b2 = model_params


   # Predict yield using the combined model
   predicted_yield = combined_exponential([ndre1_value, ndvi_value], a, b1, b2)
   return predicted_yield




# Test the model by inputting values for both Mean NDRE1 and Mean NDVI
while True:
   try:
       # Get user input for Mean NDRE1 and Mean NDVI
       ndre1_input = float(input("Enter a value for Mean NDRE1 (between 0 and 1) or 'exit' to quit: "))
       if ndre1_input == 'exit':
           break


       ndvi_input = float(input("Enter a value for Mean NDVI (between 0 and 1): "))


       # Predict the yield for the given NDRE1 and NDVI values
       predicted_yield = predict_yield_combined(ndre1_input, ndvi_input, combined_params)


       # Print the predicted yield
       print(f"Predicted Yield for Mean NDRE1 = {ndre1_input}, Mean NDVI = {ndvi_input}: {predicted_yield:.2f} kg")


   except ValueError as e:
       print(f"Error: {e}")
