// Step 1: Load the CSV containing Farmer data with coordinates and names
var farmers = ee.FeatureCollection('projects/ee-basavarajnargal/assets/Farmerslist1');

// Step 2: Function to create a polygon from a farmer's coordinates (lat, lon)
function createPolygonFromCoordinates(farmer) {
  var coordinates = ee.String(farmer.get('Coordinates'));  // Get the coordinates string
  var coordList = ee.List(coordinates.split(' ')).map(function(coord) {
    var lonLat = ee.List(ee.String(coord).split(',')).slice(0, 2).map(function(val) {
      return ee.Number.parse(val);  // Convert each value to a number
    });
    return lonLat;  // Return lat/lon as a list of numbers
  });
  
  // Create the polygon geometry
  return ee.Feature(ee.Geometry.Polygon(coordList), farmer.toDictionary());  // Keep all farmer attributes
}

// Step 3: Generate the individual polygons for each farmer
var farmerPolygons = farmers.map(createPolygonFromCoordinates);

// Step 4: Define the time range for 2023
var time_start = ee.Date('2023-01-01');
var time_end = ee.Date('2023-12-31');
var time_dif = time_end.difference(time_start, 'day');

// Step 5: Load Sentinel-1 data (VV polarization and IW mode)
var sen1 = ee.ImageCollection("COPERNICUS/S1_GRD")
  .filterDate(time_start, time_end)
  .filterBounds(farmerPolygons)
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .select('VV');

// Step 6: Filter ascending and descending orbits
var asc = sen1.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'));
var des = sen1.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));

// Step 7: Generate a list of dates at 10-day intervals
var list_dates = ee.List.sequence(0, time_dif, 10).map(function(interval){
  return ee.Date.fromYMD(2023, 1, 1).advance(interval, 'days');
});

// Step 8: Create 10-day composites for ascending and descending orbits
var asc_10days = ee.ImageCollection(list_dates.map(function(dates){
  var start_date = ee.Date(dates);
  var end_date = start_date.advance(10, 'days');
  var composite = asc.filterDate(start_date, end_date).mean();
  var bands = composite.bandNames().size();
  return composite
    .set('system:time_start', start_date.millis())
    .set('system:time_end', end_date.millis())
    .set('band_number', bands);
})).filter(ee.Filter.eq('band_number', 1));

var des_10days = ee.ImageCollection(list_dates.map(function(dates){
  var start_date = ee.Date(dates);
  var end_date = start_date.advance(10, 'days');
  var composite = des.filterDate(start_date, end_date).mean();
  var bands = composite.bandNames().size();
  return composite
    .set('system:time_start', start_date.millis())
    .set('system:time_end', end_date.millis())
    .set('band_number', bands);
})).filter(ee.Filter.eq('band_number', 1));

// Step 9: Perform speckle reduction using a focal mean
var asc_sigma = asc_10days.map(function(img){
  var sigma = ee.Image(10).pow(img.divide(10)).rename('sigma');
  var speckle = sigma.focalMean(30, 'square', 'meters');
  return speckle.copyProperties(img, img.propertyNames());
});

var des_sigma = des_10days.map(function(img){
  var sigma = ee.Image(10).pow(img.divide(10)).rename('sigma');
  var speckle = sigma.focalMean(30, 'square', 'meters');
  return speckle.copyProperties(img, img.propertyNames());
});

// Step 10: Calculate soil moisture index for ascending and descending orbits
var asc_min = asc_sigma.min();
var asc_max = asc_sigma.max();

var asc_sm = asc_sigma.map(function(img){
  var index = (img.subtract(asc_min)).divide(asc_max.subtract(asc_min));
  var date = img.date().format('YYYY-MM-dd');
  return index.rename('sm_asc')
    .copyProperties(img, ['system:time_start'])
    .set('date', ee.String(date));
});

var des_min = des_sigma.min();
var des_max = des_sigma.max();

var des_sm = des_sigma.map(function(img){
  var index = (img.subtract(des_min)).divide(des_max.subtract(des_min));
  var date = img.date().format('YYYY-MM-dd');
  return index.rename('sm_des')
    .copyProperties(img, ['system:time_start'])
    .set('date', ee.String(date));
});

// Step 11: Extract time series data for soil moisture (ascending and descending) for each farmer's polygon
var soilMoistureTimeSeries = farmerPolygons.map(function(farmer) {
  var farmerGeometry = farmer.geometry();

  // Ascending Soil Moisture for the farmer's polygon
  var ascSMTimeSeries = asc_sm.map(function(image) {
    var meanAscSM = image.reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: farmerGeometry,
      scale: 30,
      crs: 'EPSG:4326'
    });

    var date = image.get('system:time_start');
    return ee.Feature(null, {
      'farmer': farmer.get('Farmer Name'),
      'date': ee.Date(date).format('YYYY-MM-dd'),
      'sm_asc': meanAscSM.get('sm_asc')
    });
  });

  // Descending Soil Moisture for the farmer's polygon
  var desSMTimeSeries = des_sm.map(function(image) {
    var meanDesSM = image.reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: farmerGeometry,
      scale: 30,
      crs: 'EPSG:4326'
    });

    var date = image.get('system:time_start');
    return ee.Feature(null, {
      'farmer': farmer.get('Farmer Name'),
      'date': ee.Date(date).format('YYYY-MM-dd'),
      'sm_des': meanDesSM.get('sm_des')
    });
  });

  // Merge ascending and descending time series
  return ascSMTimeSeries.merge(desSMTimeSeries);
}).flatten(); // Flatten to get a single FeatureCollection

// Step 12: Export soil moisture values as CSV to Google Drive
Export.table.toDrive({
  collection: soilMoistureTimeSeries,
  description: 'Soil_Moisture_Index_2023_Individual_Farmers',  // CSV file name
  fileFormat: 'CSV',  // File format
  folder: 'test',  // Folder in Google Drive to store the CSV
  fileNamePrefix: 'Soil_Moisture_Index_2023_Individual_Farmers',  // Prefix for the exported file
  selectors: ['farmer', 'date', 'sm_asc', 'sm_des']  // Fields to include in the CSV (farmer, date, sm_asc, sm_des)
});
